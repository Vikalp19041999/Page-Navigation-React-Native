{"version":3,"sources":["createStackNavigator.tsx"],"names":["React","useNavigationBuilder","createNavigatorFactory","StackRouter","StackActions","StackView","StackNavigator","initialRouteName","children","screenOptions","rest","state","descriptors","navigation","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"mappings":"imCAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OACEC,oBADF,CAEEC,sBAFF,KAKO,0BALP,CAMA,OACEC,WADF,CAIEC,YAJF,KAKO,2BALP,CAMA,MAAOC,CAAAA,SAAP,KAAsB,0BAAtB,CAWA,QAASC,CAAAA,cAAT,MAKU,IAJRC,CAAAA,gBAIQ,MAJRA,gBAIQ,CAHRC,QAGQ,MAHRA,QAGQ,CAFRC,aAEQ,MAFRA,aAEQ,CADLC,IACK,0GACmCT,oBAAoB,CAK7DE,WAL6D,CAKhD,CACbI,gBAAgB,CAAhBA,gBADa,CAEbC,QAAQ,CAARA,QAFa,CAGbC,aAAa,CAAbA,aAHa,CALgD,CADvD,CACAE,KADA,uBACAA,KADA,CACOC,WADP,uBACOA,WADP,CACoBC,UADpB,uBACoBA,UADpB,CAYRb,KAAK,CAACc,SAAN,CACE,iBACED,CAAAA,UAAU,CAACE,WAAX,EACAF,UAAU,CAACE,WAAX,CAAuB,UAAvB,CAAmC,SAAAC,CAAC,CAAI,CACtC,GAAMC,CAAAA,SAAS,CAAGJ,UAAU,CAACI,SAAX,EAAlB,CAIAC,qBAAqB,CAAC,UAAM,CAC1B,GACEP,KAAK,CAACQ,KAAN,CAAc,CAAd,EACAF,SADA,EAEA,CAAED,CAAD,CAAkCI,gBAHrC,CAIE,CAGAP,UAAU,CAACQ,QAAX,kBACKjB,YAAY,CAACkB,QAAb,EADL,EAEEC,MAAM,CAAEZ,KAAK,CAACa,GAFhB,IAID,CACF,CAboB,CAArB,CAcD,CAnBD,CAFF,EADF,CAuBE,CAACX,UAAD,CAAaF,KAAK,CAACQ,KAAnB,CAA0BR,KAAK,CAACa,GAAhC,CAvBF,EA0BA,MACE,qBAAC,SAAD,aACMd,IADN,EAEE,KAAK,CAAEC,KAFT,CAGE,WAAW,CAAEC,WAHf,CAIE,UAAU,CAAEC,UAJd,kDADF,CAQD,CAED,cAAeX,CAAAA,sBAAsB,CAGnCI,cAHmC,CAArC","sourcesContent":["import * as React from 'react';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n} from '@react-navigation/native';\nimport {\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n} from '@react-navigation/routers';\nimport StackView from '../views/Stack/StackView';\nimport {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener &&\n      navigation.addListener('tabPress', e => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationOptions,\n  typeof StackNavigator\n>(StackNavigator);\n"]}