{"version":3,"sources":["DrawerRouter.tsx"],"names":["shortid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","options","router","getInitialState","routeNames","routeParamList","index","initialRouteName","undefined","indexOf","stale","key","routeKeyHistory","routes","map","name","params","isDrawerOpen","getRehydratedState","partialState","state","getStateForRouteFocus","findIndex","r","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import shortid from 'shortid';\nimport { CommonAction, Router } from '@react-navigation/core';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions;\n\nexport type DrawerNavigationState = Omit<TabNavigationState, 'type'> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Whether the drawer is open or closed.\n   */\n  isDrawerOpen: boolean;\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter(\n  options: DrawerRouterOptions\n): Router<DrawerNavigationState, DrawerActionType | CommonAction> {\n  const router = (TabRouter(options) as unknown) as Router<\n    DrawerNavigationState,\n    TabActionType | CommonAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        options.initialRouteName === undefined\n          ? 0\n          : routeNames.indexOf(options.initialRouteName);\n\n      return {\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${shortid()}`,\n        index,\n        routeNames,\n        routeKeyHistory: [],\n        routes: routeNames.map(name => ({\n          name,\n          key: `${name}-${shortid()}`,\n          params: routeParamList[name],\n        })),\n        isDrawerOpen: false,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      const state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n      });\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${shortid()}`,\n        isDrawerOpen:\n          typeof partialState.isDrawerOpen === 'boolean'\n            ? partialState.isDrawerOpen\n            : false,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n\n      const result =\n        index === -1 || index === state.index\n          ? state\n          : router.getStateForRouteFocus(state, key);\n\n      if (result.isDrawerOpen) {\n        return {\n          ...result,\n          isDrawerOpen: false,\n        };\n      }\n\n      return result;\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          if (state.isDrawerOpen) {\n            return state;\n          }\n\n          return {\n            ...state,\n            isDrawerOpen: true,\n          };\n\n        case 'CLOSE_DRAWER':\n          if (!state.isDrawerOpen) {\n            return state;\n          }\n\n          return {\n            ...state,\n            isDrawerOpen: false,\n          };\n\n        case 'TOGGLE_DRAWER':\n          return {\n            ...state,\n            isDrawerOpen: !state.isDrawerOpen,\n          };\n\n        case 'NAVIGATE':\n          return router.getStateForAction(\n            {\n              ...state,\n              isDrawerOpen: false,\n            },\n            action,\n            options\n          );\n\n        case 'GO_BACK':\n          if (state.isDrawerOpen) {\n            return {\n              ...state,\n              isDrawerOpen: false,\n            };\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]}