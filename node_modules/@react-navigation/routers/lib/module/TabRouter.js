import _defineProperty from"@babel/runtime/helpers/defineProperty";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import shortid from'shortid';import{BaseRouter}from'@react-navigation/core';export var TabActions={jumpTo:function jumpTo(name,params){return{type:'JUMP_TO',payload:{name:name,params:params}};}};var changeIndex=function changeIndex(state,index){var previousKey=state.routes[state.index].key;var currentKey=state.routes[index].key;var routeKeyHistory=state.routeKeyHistory.filter(function(key){return key!==currentKey&&key!==previousKey;}).concat(previousKey);return _objectSpread({},state,{index:index,routeKeyHistory:routeKeyHistory});};export default function TabRouter(_ref){var initialRouteName=_ref.initialRouteName,_ref$backBehavior=_ref.backBehavior,backBehavior=_ref$backBehavior===void 0?'history':_ref$backBehavior;var router=_objectSpread({},BaseRouter,{type:'tab',getInitialState:function getInitialState(_ref2){var routeNames=_ref2.routeNames,routeParamList=_ref2.routeParamList;var index=initialRouteName!==undefined&&routeNames.includes(initialRouteName)?routeNames.indexOf(initialRouteName):0;return{stale:false,type:'tab',key:"tab-"+shortid(),index:index,routeNames:routeNames,routeKeyHistory:[],routes:routeNames.map(function(name){return{name:name,key:name+"-"+shortid(),params:routeParamList[name]};})};},getRehydratedState:function getRehydratedState(partialState,_ref3){var routeNames=_ref3.routeNames,routeParamList=_ref3.routeParamList;var state=partialState;if(state.stale===false){return state;}var routes=routeNames.map(function(name){var route=state.routes.find(function(r){return r.name===name;});return _objectSpread({},route,{name:name,key:route&&route.name===name&&route.key?route.key:name+"-"+shortid(),params:routeParamList[name]!==undefined?_objectSpread({},routeParamList[name],{},route?route.params:undefined):route?route.params:undefined});});var index=Math.min(Math.max(typeof state.index==='number'?state.index:routeNames.indexOf(state.routes[0].name),0),routes.length-1);var routeKeyHistory=state.routeKeyHistory?state.routeKeyHistory.filter(function(key){return routes.find(function(r){return r.key===key;});}):[];return{stale:false,type:'tab',key:"tab-"+shortid(),index:index,routeNames:routeNames,routeKeyHistory:routeKeyHistory,routes:routes};},getStateForRouteNamesChange:function getStateForRouteNamesChange(state,_ref4){var routeNames=_ref4.routeNames,routeParamList=_ref4.routeParamList;var routes=routeNames.map(function(name){return state.routes.find(function(r){return r.name===name;})||{name:name,key:name+"-"+shortid(),params:routeParamList[name]};});var index=Math.max(0,routeNames.indexOf(state.routes[state.index].name));return _objectSpread({},state,{routeNames:routeNames,routes:routes,index:index});},getStateForRouteFocus:function getStateForRouteFocus(state,key){var index=state.routes.findIndex(function(r){return r.key===key;});if(index===-1||index===state.index){return state;}return changeIndex(state,index);},getStateForAction:function getStateForAction(state,action){switch(action.type){case'JUMP_TO':case'NAVIGATE':{var index=-1;if(action.type==='NAVIGATE'&&action.payload.key){index=state.routes.findIndex(function(route){return route.key===action.payload.key;});}else{index=state.routes.findIndex(function(route){return route.name===action.payload.name;});}if(index===-1){return null;}return changeIndex(_objectSpread({},state,{routes:action.payload.params!==undefined?state.routes.map(function(route,i){return i===index?_objectSpread({},route,{params:_objectSpread({},route.params,{},action.payload.params)}):route;}):state.routes}),index);}case'GO_BACK':switch(backBehavior){case'initialRoute':{var _index=initialRouteName?state.routeNames.indexOf(initialRouteName):0;if(_index===-1||_index===state.index){return null;}return _objectSpread({},state,{index:_index});}case'order':if(state.index===0){return null;}return _objectSpread({},state,{index:state.index-1});case'history':{var previousKey=state.routeKeyHistory[state.routeKeyHistory.length-1];var _index2=state.routes.findIndex(function(route){return route.key===previousKey;});if(_index2===-1){return null;}return _objectSpread({},state,{routeKeyHistory:state.routeKeyHistory.slice(0,-1),index:_index2});}default:return null;}default:return BaseRouter.getStateForAction(state,action);}},shouldActionChangeFocus:function shouldActionChangeFocus(action){return action.type==='NAVIGATE';},actionCreators:TabActions});return router;}
//# sourceMappingURL=TabRouter.js.map